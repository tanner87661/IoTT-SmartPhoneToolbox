[{
	"id": "41e58341.b4cdec",
	"type": "ui_template",
	"z": "eb6d436d.d04f9",
	"group": "80746b01.4aab38",
	"name": "css etc",
	"order": 8,
	"width": "0",
	"height": "0",
	"format": "<style>\n* { \n  box-sizing: border-box; \n  }\n  .filled { \n      height: 100% !important;\n        width: 50% !important;\n      padding: 0 !important;\n      margin: 0 !important;\n  }\n  .framed { \n      height: 100% !important;\n      width: 50% !important;\n      padding: 5 !important;\n      margin: 5 !important;\n  }\n  .framed_short { \n      height: 100% !important;\n      width: 30% !important;\n      padding: 5 !important;\n      margin: 5 !important;\n  }\n  .button-cell { \n      height: 100% !important;\n      width: 50% !important;\n      padding: 5 !important;\n      margin: 5 !important;\n      text-align: center !important;\n  }\n  .radio-cell { \n//      height: 100% !important;\n//      width: 10% !important;\n//      padding: 0 !important;\n//      margin: 0 !important;\n//      text-align: left !important;\n//      font-size: 10px;\n  }\n\n  .radio-text { \n      text-align: left !important;\n      font-size: 16px;\n  }\n\n  .nr-dashboard-template {\n      padding: 0;\n      margin: 0;\n  }\n  \n  .rounded {\n  border-radius: 12px 12px 12px 12px;\n}\n \n   .bigfont {\n  font-size: 18px;\n}\n\n   .smallfont {\n  font-size: 12px;\n}\n   .subfont {\n  font-size: 10px;\n}\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n/* Style the header */\nheader {\n  background-color: silver;\n  padding: 30px;\n  text-align: center;\n  font-size: 35px;\n  color: white;\n}\n\n/* Create two columns/boxes that floats next to each other */\nnav {\n  float: left;\n  width: 30%;\n//  height: 300px; /* only for demonstration, should be removed */\n  background: #ccc;\n  padding: 20px;\n}\n\n/* Style the list inside the menu */\nnav ul {\n  list-style-type: none;\n  padding: 0;\n}\n\narticle {\n  float: left;\n  padding: 20px;\n  width: 100%;\n  background-color: silver;\n//  height: 300px; /* only for demonstration, should be removed */\n}\n\n/* Clear floats after the columns */\nsection:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n/* Style the footer */\nfooter {\n  background-color: #777;\n  padding: 10px;\n  text-align: center;\n  color: white;\n}\n\n/* Responsive layout - makes the two columns/boxes stack on top of each other instead of next to each other, on small screens */\n@media (max-width: 600px) {\n  nav, article {\n    width: 100%;\n    height: auto;\n  }\n}\n\n.slider {\n  -webkit-appearance: none;\n  width: 100%;\n  height: 30px;\n  border-radius: 10px;  \n  background: #d3d3d3;\n  outline: none;\n  opacity: 0.7;\n  -webkit-transition: .2s;\n  transition: opacity .2s;\n}\n\n.slider::-webkit-slider-thumb { //moving dot\n  -webkit-appearance: none;\n  appearance: none;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%; \n  background: #4CAF50;\n  cursor: pointer;\n}\n\n.slider::-moz-range-thumb {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  background: #4CAF50;\n  cursor: pointer;\n}\n  \n/* The Modal (background) */\n.modal {\n  display: none; /* Hidden by default */\n  position: fixed; /* Stay in place */\n  z-index: 1; /* Sit on top */\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  overflow: auto; /* Enable scroll if needed */\n  background-color: rgb(0,0,0); /* Fallback color */\n  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  -webkit-animation-name: fadeIn; /* Fade in the background */\n  -webkit-animation-duration: 0.4s;\n  animation-name: fadeIn;\n  animation-duration: 0.4s\n}\n\n/* Modal Content */\n.modal-content {\n  position: fixed;\n  bottom: 0;\n  background-color: #fefefe;\n  width: 100%;\n  -webkit-animation-name: slideIn;\n  -webkit-animation-duration: 0.4s;\n  animation-name: slideIn;\n  animation-duration: 0.4s\n}\n\n/* The Close Button */\n.close {\n  color: white;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}\n\n.modal-header {\n  padding: 2px 16px;\n  background-color: grey;\n  color: white;\n}\n\n.modal-body {padding: 2px 16px;}\n\n.modal-footer {\n  padding: 2px 16px;\n  background-color: grey;\n  color: white;\n}\n\n/* Add Animation */\n@-webkit-keyframes slideIn {\n  from {bottom: -300px; opacity: 0} \n  to {bottom: 0; opacity: 1}\n}\n\n@keyframes slideIn {\n  from {bottom: -300px; opacity: 0}\n  to {bottom: 0; opacity: 1}\n}\n\n@-webkit-keyframes fadeIn {\n  from {opacity: 0} \n  to {opacity: 1}\n}\n\n@keyframes fadeIn {\n  from {opacity: 0} \n  to {opacity: 1}\n}\n  \n</style>\n\n<script>\n$('.vibrate').on('click', function() {\n  navigator.vibrate(100);\n});\n\n$('.slidervibrate').on('change', function() {\n  navigator.vibrate(100);\n});\n\nfunction restore_bg(x) {\n            $(this).css(\"background-color\", x);\n    };\n\n$('.touched').on('mousedown', function() {\n    \n    var x= $(this).css(\"background-color\");\n    $(this).css(\"background-color\", \"yellow\");\n    \n    setTimeout(restore_bg.bind(this,x),100);\n    navigator.vibrate(80);\n    });\n    \n</script>",
	"storeOutMessages": false,
	"fwdInMessages": false,
	"templateScope": "local",
	"x": 566,
	"y": 93.99993896484375,
	"wires": [
		[]
	]
}, {
	"id": "197475e1.335eca",
	"type": "ui_template",
	"z": "eb6d436d.d04f9",
	"group": "80746b01.4aab38",
	"name": "LocoNet Viewer",
	"order": 2,
	"width": "7",
	"height": "12",
	"format": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<title>LocoNet Viewer</title>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n<script>\n    var dispTimeStmpBit = 0x01;\n    var dispOpCodeBit = 0x02;\n    var dispPlainEnglishBit = 0x04;\n    var dispRawDataBit = 0x08;\n\n    var opcTrackBit = 0x01;\n    var opcFastClockBit = 0x02;\n    var opcProgBit = 0x04;\n    var opcSlotBit = 0x08;\n    var opcLocoBit = 0x10;\n    var opcSwiBit = 0x20;\n    var opcSigBit = 0x40;\n    var opcSensorBit = 0x80;\n    var opcPwrBit = 0x0100;\n    var opcBtnBit = 0x0200;\n    var opcAnalogBit = 0x0400;\n    var opcMiscBit = 0x0800;\n    var opcSysBit = 0x1000;\n    var opcImmBit = 0x2000;\n    var opcSVBit = 0x4000;\n    var opcLissyBit = 0x8000;\n    \n    \n    var cookieexp = 8; //days until cookies expire\n    var uniquID = \"1\";\n    var mySelf = \"LNViewer\" + (Math.floor(Math.random() * 10000) + 1).toString();\n    var thisScope = scope;\n    var freezeStatus = false;\n\n    var lnData =  [];\n    var myReqId = 0;\n    var btnColOn = '#C5A91B';\n    var btnColOff = '#2980B9';\n    var extDirStatus =-1;\n    \n    var lnDispLen = 20;\n    var maxDispLen = 20;\n    var lnpMsg = 1;\n    var dispConfig = 0;\n    var filterConfig = 0;\n    var filterList = []; //opcode values to display\n    var oldFilterList = [];\n    var oldConfig = 0;\n\n    var lastLACKMsg = [];\n\n    function setCookie(cname, cvalue, exdays) \n    {\n        cname += uniquID;\n        var d = new Date();\n        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\n        var expires = \"expires=\"+d.toUTCString();\n        document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n    }\n\n    function getCookie(cname) \n    {\n        cname += uniquID;\n        var name = cname + \"=\";\n        var ca = document.cookie.split(';');\n        for(var i = 0; i < ca.length; i++) \n        {\n            var c = ca[i];\n            while (c.charAt(0) == ' ') \n                c = c.substring(1);\n            if (c.indexOf(name) == 0) \n                return c.substring(name.length, c.length);\n        }\n        return \"\";\n    }\n    \n    function calcDispLen()\n    {\n        var newlnpMsg = 0;\n        if ((dispConfig & (dispTimeStmpBit || dispOpCodeBit)) > 0)\n          newlnpMsg += 1;\n        if ((dispConfig & (dispRawDataBit)) > 0)\n          newlnpMsg += 1;\n        if ((dispConfig & (dispPlainEnglishBit)) > 0)\n          newlnpMsg += 1;\n        if (newlnpMsg === 0)\n          newlnpMsg += 1;\n        lnpMsg = newlnpMsg; //lines per message\n        lnDispLen = Math.trunc(maxDispLen / newlnpMsg);\n        clearTable(document.getElementById(\"lnTable\"));    \n    }\n\n    function initDisplay()\n    {\n        freezeStatus = false;\n        var hlpStr = getCookie(\"lnviewerid\");\n        if (hlpStr != \"\")\n            mySelf = hlpStr;\n        else\n            setCookie(\"lnviewerid\", mySelf, cookieexp);\n        dispConfig =  getCookie(\"dispconfig\");\n        if (isNaN(dispConfig))\n            dispConfig = dispOpCodeBit | dispRawDataBit;\n        filterConfig =  getCookie(\"filterconfig\");\n        if (isNaN(filterConfig))\n            filterConfig = 0x0FFF; //display all messages\n        var filterListStr = getCookie(\"filterlist\").split(\",\");\n        for (var i = 0; i < filterListStr.length; i++)\n        {\n            var newOpCode = parseInt(filterListStr[i]);\n            if (!isNaN(newOpCode))\n                filterList.push(newOpCode);\n        }\n        calcDispLen();\n    }\n\nfunction getHexString(lnData)\n{\n    var msgStr = \"\";\n    for (i = 0; i < lnData.length; i++) \n        msgStr += (i===0?\" 0x\":\", 0x\") + (\"00\" + lnData[i].toString(16).toUpperCase()).slice(-2);\n    return msgStr;\n}\n\nfunction getOpCodeText(OpCodeVal)\n{\n    var OpCode;\n    switch(OpCodeVal)\n    {\n        case 0x81 : OpCode = \"OPC_BUSY\"; break;\n        case 0x82 : OpCode = \"OPC_GPOFF\"; break;\n        case 0x83 : OpCode = \"OPC_GPON\"; break;\n        case 0x85 : OpCode = \"OPC_IDLE\"; break;\n        case 0xA0 : OpCode = \"OPC_LOCO_SPD\"; break;\n        case 0xA1 : OpCode = \"OPC_LOCO_DIRF\"; break;\n        case 0xA2 : OpCode = \"OPC_LOCO_SND\"; break;\n        case 0xB0 : OpCode = \"OPC_SW_REQ\"; break;\n        case 0xB1 : OpCode = \"OPC_SW_REP\"; break;\n        case 0xB2 : OpCode = \"OPC_INPUT_REP\"; break;\n        case 0xB3 : OpCode = \"OPC_UNKNOWN\"; break;\n        case 0xB4 : OpCode = \"OPC_LONG_ACK\"; break;\n        case 0xB5 : OpCode = \"OPC_SLOT_STAT1\"; break;\n        case 0xB6 : OpCode = \"OPC_CONSIST_FUNC\"; break;\n        case 0xB8 : OpCode = \"OPC_UNLINK_SLOTS\"; break;\n        case 0xB9 : OpCode = \"OPC_LINK_SLOTS\"; break;\n        case 0xBA : OpCode = \"OPC_MOVE_SLOTS\"; break;\n        case 0xBB : OpCode = \"OPC_RQ_SL_DATA\"; break;\n        case 0xBC : OpCode = \"OPC_SW_STATE\"; break;\n        case 0xBD : OpCode = \"OPC_SW_ACK\"; break;\n        case 0xBF : OpCode = \"OPC_LOCO_ADR\"; break;\n        case 0xD0 : OpCode = \"OPC_MULTI_SENSE\"; break;\n        case 0xD4 : OpCode = \"OPC_UHLI-FUN\"; break;\n        case 0xD7 : OpCode = \"OPC_PANEL_RESPONSE\"; break;\n        case 0xDF : OpCode = \"OPC_PANEL_QUERY\"; break;\n        case 0xE4 : OpCode = \"OPC_LISSY_REP\"; break;\n        case 0xE5 : OpCode = \"OPC_PEER_XFER\"; break;\n        case 0xE6 : OpCode = \"OPC_ALM_READ\"; break;\n        case 0xE7 : OpCode = \"OPC_SL_RD_DATA\"; break;\n        case 0xED : OpCode = \"OPC_IMM_PACKET\"; break;\n        case 0xEE : OpCode = \"OPC_WR_LIM_DATA\"; break;\n        case 0xEF : OpCode = \"OPC_WR_SL_DATA\"; break;\n        default: OpCode = \"Unknown OpCode \" + OpCodeVal.toString(16); break;\n    }\n    return OpCode;\n}\n\nfunction processDisplay(sender)\n{\n    //initialize filter checkboxes\n    oldConfig = dispConfig;\n    document.getElementById(\"cbTimeStamp\").checked = dispConfig & dispTimeStmpBit;\n    document.getElementById(\"cbOpCode\").checked = dispConfig & dispOpCodeBit;\n    document.getElementById(\"cbPlainEnglish\").checked = dispConfig & dispPlainEnglishBit;\n    document.getElementById(\"cbRawData\").checked = dispConfig & dispRawDataBit;\n    //display window\n    display.style.display = \"block\";\n}\n\nfunction setDisplay(sender)\n{\n    if (sender.id == \"saveDisplay\")\n    {\n        //save filter checkboxes\n        dispConfig = 0;\n        if (document.getElementById(\"cbTimeStamp\").checked)\n            dispConfig |= dispTimeStmpBit;\n        if (document.getElementById(\"cbOpCode\").checked)\n            dispConfig |= dispOpCodeBit;\n        if (document.getElementById(\"cbPlainEnglish\").checked)\n            dispConfig |= dispPlainEnglishBit;\n        if (document.getElementById(\"cbRawData\").checked)\n            dispConfig |= dispRawDataBit;\n        setCookie(\"dispconfig\", dispConfig, cookieexp);\n        calcDispLen();\n        lnData = [];\n    }\n    if (sender.id == \"cancelDisplay\")\n        dispConfig = oldConfig; //restore old values\n    //hide window\n    display.style.display = \"none\";\n}\n\nfunction processFilter(sender)\n{\n    oldConfig = filterConfig;\n    oldFilterList = filterList;\n    //initialize filter checkboxes\n    document.getElementById(\"opcTrack\").checked = filterConfig & opcTrackBit;\n    document.getElementById(\"opcFastClock\").checked = filterConfig & opcFastClockBit;\n    document.getElementById(\"opcProg\").checked = filterConfig & opcProgBit;\n    document.getElementById(\"opcSys\").checked = filterConfig & opcSysBit;\n    document.getElementById(\"opcImm\").checked = filterConfig & opcImmBit;\n    document.getElementById(\"opcSV\").checked = filterConfig & opcSVBit;\n    document.getElementById(\"opcSlot\").checked = filterConfig & opcSlotBit;\n    document.getElementById(\"opcLoco\").checked = filterConfig & opcLocoBit;\n    document.getElementById(\"opcSwi\").checked = filterConfig & opcSwiBit;\n    document.getElementById(\"opcSig\").checked = filterConfig & opcSigBit;\n    document.getElementById(\"opcSensor\").checked = filterConfig & opcSensorBit;\n    document.getElementById(\"opcPwr\").checked = filterConfig & opcPwrBit;\n    document.getElementById(\"opcBtn\").checked = filterConfig & opcBtnBit;\n    document.getElementById(\"opcAnalog\").checked = filterConfig & opcAnalogBit;\n    document.getElementById(\"opcMisc\").checked = filterConfig & opcMiscBit;\n    document.getElementById(\"opcLissy\").checked = filterConfig & opcLissyBit;\n\n    var filterStr = getHexString(filterList);\n    document.getElementById(\"opcode\").value = filterStr;\n\n\n    //display window\n    filter.style.display = \"block\";\n}\n\nfunction setAllFilter(sender)\n{\n    var tempConfig = oldConfig;\n    var tempFilterList = oldFilterList;\n    if (sender.id == \"setAll\")   \n        filterConfig = 0xFFFF;\n    else\n    {\n        filterConfig = 0x0000;\n        filterList = [];\n    }\n    processFilter(sender);  \n    oldConfig = tempConfig;\n    oldFilterList = tempFilterList;\n}\n\nfunction setOpCodeFilter()\n{\n   //add code here if you want to react on user input to the opcode field while the user is typing, e.g. for error correction \n}\n\nfunction setFilter(sender)\n{\n    if (sender.id == \"saveFilter\")\n    {\n        filterConfig = 0;\n        if (document.getElementById(\"opcTrack\").checked)\n            filterConfig |= opcTrackBit;\n        if (document.getElementById(\"opcFastClock\").checked)\n            filterConfig |= opcFastClockBit;\n        if (document.getElementById(\"opcProg\").checked)\n            filterConfig |= opcProgBit;\n        if (document.getElementById(\"opcSys\").checked)\n            filterConfig |= opcSysBit;\n        if (document.getElementById(\"opcImm\").checked)\n            filterConfig |= opcImmBit;\n        if (document.getElementById(\"opcSV\").checked)\n            filterConfig |= opcSVBit;\n        if (document.getElementById(\"opcSlot\").checked)\n            filterConfig |= opcSlotBit;\n        if (document.getElementById(\"opcLoco\").checked)\n            filterConfig |= opcLocoBit;\n        if (document.getElementById(\"opcSwi\").checked)\n            filterConfig |= opcSwiBit;\n        if (document.getElementById(\"opcSig\").checked)\n            filterConfig |= opcSigBit;\n        if (document.getElementById(\"opcSensor\").checked)\n            filterConfig |= opcSensorBit;\n        if (document.getElementById(\"opcPwr\").checked)\n            filterConfig |= opcPwrBit;\n        if (document.getElementById(\"opcBtn\").checked)\n            filterConfig |= opcBtnBit;\n        if (document.getElementById(\"opcAnalog\").checked)\n            filterConfig |= opcAnalogBit;\n        if (document.getElementById(\"opcMisc\").checked)\n            filterConfig |= opcMiscBit;\n        if (document.getElementById(\"opcLissy\").checked)\n            filterConfig |= opcLissyBit;\n        //save filter checkboxes\n        setCookie(\"filterconfig\", filterConfig, cookieexp);\n        var filterListArray = document.getElementById(\"opcode\").value.split(',');\n        filterList = [];\n        for (var i = 0; i < filterListArray.length; i++)\n        {\n            var nextVal;\n            if (filterListArray[i].indexOf(\"0x\") >= 0)\n                nextVal = parseInt(filterListArray[i]);\n            else\n                nextVal = parseInt(filterListArray[i,16]);\n            if (!isNaN(nextVal))\n                filterList.push(nextVal);\n        }\n        setCookie(\"filterlist\", filterList, cookieexp);\n    }\n    if (sender.id == \"cancelFilter\")\n    {\n        filterConfig = oldConfig;\n        filterList = oldFilterList;\n    }\n    //hide window\n    filter.style.display = \"none\";\n}\n\nfunction passFilter(lnMsg)\n{\n    if (filterList.indexOf(lnMsg[0]) >= 0) return true;\n    if (((filterConfig & opcTrackBit) > 0) && ([0x82, 0x83, 0x85].indexOf(lnMsg[0]) >= 0)) return true;\n    if (((filterConfig & opcFastClockBit) > 0) && ([0xE7, 0xEF].indexOf(lnMsg[0]) >= 0) && (lnMsg[2] == 0x7B)) return true;\n    if (((filterConfig & opcFastClockBit) > 0) && ([0xBB].indexOf(lnMsg[0]) >= 0) && (lnMsg[1] == 0x7B)) return true;\n    if (((filterConfig & opcProgBit) > 0) && ([0xE7, 0xEF].indexOf(lnMsg[0]) >= 0) && (lnMsg[2] == 0x7C)) return true;\n    if (((filterConfig & opcProgBit) > 0) && ([0xBB].indexOf(lnMsg[0]) >= 0) && (lnMsg[1] == 0x7C)) return true;\n    if (((filterConfig & opcSysBit) > 0) && ([0x81,0xB4].indexOf(lnMsg[0]) >= 0)) return true;\n    if (((filterConfig & opcImmBit) > 0) && ([0xED].indexOf(lnMsg[0]) >= 0)) return true;\n    if (((filterConfig & opcSVBit) > 0) && (lnMsg[0] == 0xE5)  && (lnMsg[1] == 0x10)) return true;\n    if (((filterConfig & opcSwiBit) > 0) && ([0xB0, 0xB1, 0xBC, 0xBD].indexOf(lnMsg[0]) >= 0)) return true;\n    if (((filterConfig & opcSigBit) > 0) && (lnMsg[0] == 0xED) && (lnMsg[1] == 0x0B) && (lnMsg[2] == 0x7F) && ((lnMsg[3] & 0x70) == 0x30)) //extended acc command\n    {\n        var accAddr = lnMsg[5] + ((lnMsg[4] & 0x01) << 7);\n        if ((accAddr >= 128 ) && (accAddr < 192 ))  return true;\n    }\n    if (((filterConfig & opcLocoBit) > 0) && ([0xA0, 0xA1, 0xA2, 0xB6].indexOf(lnMsg[0]) >= 0)) return true;\n    if (((filterConfig & opcSlotBit) > 0) && ([0xE7, 0xEF].indexOf(lnMsg[0]) >= 0) && (lnMsg[2] < 0x70)) return true;\n    if (((filterConfig & opcSlotBit) > 0) && ([0xB5, 0xB8, 0xB9, 0xBA].indexOf(lnMsg[0]) >= 0) && (lnMsg[1] < 0x70)) return true;\n    if (((filterConfig & opcSensorBit) > 0) && ([0xB2].indexOf(lnMsg[0]) >= 0)) return true;\n    if (((filterConfig & opcSensorBit) > 0) && (lnMsg[0] == 0xD0) && ((lnMsg[1] & 0x40) === 0)) return true; //multi_sense BDL16\n    if (((filterConfig & opcPwrBit) > 0) && (lnMsg[0] == 0xD0) && ((lnMsg[1] & 0x60) == 0x60)) return true; //multi_sense PowerMgr\n    if (((filterConfig & opcBtnBit) > 0) && (lnMsg[0] == 0xE5) && (lnMsg[1] == 0x10) && (lnMsg[3] == 0x71) && (lnMsg[11] == 0x01))  return true;\n    if (((filterConfig & opcAnalogBit) > 0) && ([0xE5].indexOf(lnMsg[0]) >= 0) && (lnMsg[3] == 0x71) && (lnMsg[11] == 0x00)) return true;\n    if ((filterConfig & opcMiscBit) > 0) return true;\n    if (((filterConfig & opcLissyBit) > 0) && (lnMsg[0] == 0xE4)) return true;\n    return false;\n}\n\nfunction processFreeze(sender)\n{\n    if (freezeStatus == true)\n        freezeStatus = false;\n    else\n        freezeStatus = true;\n    document.getElementById(\"freeze\").innerHTML = freezeStatus ? \"Resume\" : \"Freeze\";\n}\n\n\nfunction processClear(sender)\n{\n    lnData = [];\n    clearTable(document.getElementById(\"lnTable\"));    \n}\n\nfunction clearTable(thisTable)\n{\n    var trList = thisTable.getElementsByTagName(\"td\");\n    for (var i = 0; i < trList.length; i++)\n        if (i < lnDispLen)\n        {\n            trList[i].innerHTML = \"&nbsp;\";\n            for (var j = 1; j < lnpMsg; j++)\n                trList[i].innerHTML += \"<br>\" +  \"&nbsp;\";\n        }\n        else\n            trList[i].innerHTML = \"\";\n}\n\nfunction updateTable(thisTable, thisData)\n{\n    var trList = thisTable.getElementsByTagName(\"td\");\n    var trIndex = 0;\n    for (var i = 0; i < thisData.length; i++)\n    {\n        trList[trIndex].innerHTML = thisData[i];\n        trIndex++;\n    }\n}\n\nfunction updateDisplay()\n{\n    updateTable(document.getElementById(\"lnTable\"), lnData);\n}\n\n\nfunction processLine(dispData)\n{\n    \n    if (!freezeStatus)\n    {\n        var passOK = false;\n        if (dispData.Data[0] == 0xB4) //LACK\n            passOK = passFilter(lastLACKMsg);\n        else\n            passOK = passFilter(dispData.Data)\n        if (passOK)\n        {\n        \n            var msgStr = \"\";\n            if (dispConfig === 0)\n                msgStr = \"New Loconet message, no display options set\";\n            if (dispConfig & dispTimeStmpBit)\n                msgStr = \"@\" + Math.round(dispData.ReqRecTime/1000).toString() + \"&nbsp;\";\n            if (dispConfig & dispOpCodeBit)\n                msgStr += getOpCodeText(dispData.Data[0]) + \"&nbsp;\";\n            if (dispConfig & (dispTimeStmpBit || dispOpCodeBit))\n                msgStr += \"<br>\";\n            if (dispConfig & dispRawDataBit)\n                msgStr += getHexString(dispData.Data) + \"<br>\";\n            if (dispConfig & dispPlainEnglishBit)\n                msgStr += getPlainMsgText(dispData.Data) + \"<br>\";          \n            lnData.unshift(msgStr);\n            while (lnData.length > lnDispLen)\n                lnData.pop();\n            updateDisplay();\n        }\n    }\n    if ((dispData.Data[0] & 0x08) > 0)\n        lastLACKMsg = dispData.Data; //keep a copy of the message if a reply is expected. This is for decoding LACK messages if meaning depends on data bytes\n    else\n        lastLACKMsg = []; \n}\n\n(function() {\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg) \n            {\n//                switch (msg.topic)\n//                {\n//                    case \"lnIn\": \n                        processLine(msg.payload);\n//                        break;\n//                }\n            }\n        });\n    })(scope);\n})();\n\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\"); //get array of close elements\nvar filter = document.getElementById(\"setFilterDiv\");\nvar display = document.getElementById(\"setDisplayDiv\");\n\n// When the user clicks on <span> (x), close the modal\nspan[0].onclick = function() {filter.style.display = \"none\";}\nspan[1].onclick = function() {display.style.display = \"none\";}\n//if (event.target == display) {display.style.display = \"none\";}\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {if (event.target == filter) {filter.style.display = \"none\";}; if (event.target == display) {display.style.display = \"none\";}}\n\n</script>\n\n</head>\n\n<body>\n    <table id = \"lnTable\" width=\"100%\">\n        <tr>\n            <th>LocoNet Messages</th>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n        </tr>\n    </table>\n\n    <table width=\"100%\">\n        <tr>\n            <td  class=\"button-cell\">\n                <md-button class=\"vibrate framed bigfont rounded\" id=\"freeze\" style=\"background-color:#2980b9\"   onclick=\"processFreeze(this)\"> \n                    Freeze\n                </md-button>\n            </td>\n            <td  class=\"button-cell\">\n                <md-button class=\"vibrate framed bigfont rounded\" id=\"clear\" style=\"background-color:#c0392b\" onclick=\"processClear(this)\"> \n                    Clear\n                </md-button>        \n            </td>\n        </tr>\n    </table>\n\n<footer>\n    <table width=\"100%\">\n        <tr>\n            <td  class=\"button-cell\">\n                <md-button class=\"vibrate framed smallfont rounded\" id=\"filter\" style=\"background-color:#89D082\" onclick=\"processDisplay(this)\"> \n                    Display\n                </md-button>        \n            </td>\n            <td id=\"analoglink\">IoTT</td>\n            <td  class=\"button-cell\">\n                <md-button class=\"vibrate framed smallfont rounded\" id=\"display\" style=\"background-color:#89D082\" onclick=\"processFilter(this)\"> \n                    Filter\n                </md-button>        \n            </td>\n        </tr>\n    </table>\n</footer>\n\n<!-- The Modal Filter-->\n<div id=\"setFilterDiv\" class=\"modal\">\n  <!-- Modal content -->\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <span class=\"close\">&times;</span>\n      <h3 id=\"statTitle\"></h3>\n    </div>\n    <div class=\"modal-body\">\n        <p>\n            <button type=\"button\" id=\"setAll\" onclick=\"setAllFilter(this)\" >Set All</button>\n            <button type=\"button\" id=\"clearAll\" onclick=\"setAllFilter(this)\" >Clear All</button>\n        </p>\n        <table>\n            <tr><td><h4>Track and System Status</h4></td></tr>\n            <tr>\n                <td>\n                    <input type=\"checkbox\" id=\"opcTrack\" name=\"opcTrack\" value=opcTrackBit>\n                    <label for=\"opcTrack\"> Track Power</label>\n                </td>\n                <td>\n                    <input type=\"checkbox\" id=\"opcFastClock\" name=\"opcFastClock\" value=opcFastClockBit>\n                    <label for=\"opcFastClock\"> Fast Clock</label><br>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <input type=\"checkbox\" id=\"opcProg\" name=\"opcProg\" value=opcProgBit>\n                    <label for=\"opcProg\"> CV Programming</label>\n                </td>\n                <td>\n                    <input type=\"checkbox\" id=\"opcSys\" name=\"opcSys\" value=opcSysBit>\n                    <label for=\"opcSys\"> System Reply</label>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <input type=\"checkbox\" id=\"opcImm\" name=\"opcImm\" value=opcImmBit>\n                    <label for=\"opcImm\"> DCC Immediate Cmd</label>\n                </td>\n                <td>\n                    <input type=\"checkbox\" id=\"opcSV\" name=\"opcSV\" value=opcSVBit>\n                    <label for=\"opcSV\"> SV Commands</label>\n                </td>\n            </tr>\n            <tr><td><h4>Locomotives</h4></td></tr>\n            <tr>\n                <td>\n                    <input type=\"checkbox\" id=\"opcSlot\" name=\"opcSlot\" value=opcSlotBit>\n                    <label for=\"opcSlot\"> Slot Management</label>\n                </td>\n                <td>\n                    <input type=\"checkbox\" id=\"opcLoco\" name=\"opcLoco\" value=opcLocoBit>\n                    <label for=\"opcLoco\"> Speed, Direction, Function</label><br>\n                </td>\n            </tr>\n            <tr><td><h4>Switches and Signals</h4></td></tr>\n            <tr>\n                <td>\n                    <input type=\"checkbox\" id=\"opcSwi\" name=\"opcSwi\" value=opcSwiBit>\n                    <label for=\"opcSwi\"> Switches</label>\n                </td>\n                <td>\n                    <input type=\"checkbox\" id=\"opcSig\" name=\"opcSig\" value=opcSigBit>\n                    <label for=\"opcSig\"> Signals</label><br>\n                </td>\n            </tr>\n            <tr><td><h4>Sensors and Inputs</h4></td></tr>\n            <tr>\n                <td>\n                    <input type=\"checkbox\" id=\"opcSensor\" name=\"opcSensor\" value=opcSensorBit>\n                    <label for=\"opcSensor\"> Block Occupancy</label>\n                </td>\n                <td>\n                    <input type=\"checkbox\" id=\"opcPwr\" name=\"opcPwr\" value=opcPwrBit>\n                    <label for=\"opcPwr\"> Power Management</label><br>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <input type=\"checkbox\" id=\"opcBtn\" name=\"opcBtn\" value=opcBtn>\n                    <label for=\"opcBtn\"> Input Buttons</label>\n                </td>\n                <td>\n                    <input type=\"checkbox\" id=\"opcAnalog\" name=\"opcAnalog\" value=opcAnalog>\n                    <label for=\"opcAnalog\"> Analog Inputs</label><br>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <input type=\"checkbox\" id=\"opcLissy\" name=\"opcLissy\" value=opcLissy>\n                    <label for=\"opcLissy\"> Lissy Reports</label>\n                </td>\n            </tr>\n            <tr><td><h4>Miscellaneous</h4></td></tr>\n            <tr>\n                <td>\n                    <input type=\"checkbox\" id=\"opcMisc\" name=\"opcMisc\" value=opcMisc>\n                    <label for=\"opcMisc\"> Everything else</label>\n                </td>\n            </tr>\n            <tr><td><h4>Select by OpCode</h4></td></tr>\n            <tr>\n                <td>\n                    <input type=\"text\" size=\"20\" id=\"opcode\" name=\"opcode\" oninput=\"setOpCodeFilter(this)\">\n                </td>\n            </tr>\n        </table>\n        <p>\n            <button type=\"button\" id=\"saveFilter\" onclick=\"setFilter(this)\" >Save</button>\n            <button type=\"button\" id=\"cancelFilter\" onclick=\"setFilter(this)\" >Cancel</button>\n        </p>\n    </div>\n    <div class=\"modal-footer\">\n      <h3>Click Save to complete</h3>\n    </div>\n  </div>\n</div>\n\n<!-- The Modal Display-->\n<div id=\"setDisplayDiv\" class=\"modal\">\n  <!-- Modal content -->\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <span class=\"close\">&times;</span>\n      <h3 id=\"statTitle\"></h3>\n    </div>\n    <div class=\"modal-body\">\n        <table id = \"dispTable\">\n            <tr><td><h4>Select elements to display</h4></td></tr>\n            <tr>\n                <td>\n                    <input type=\"checkbox\" id=\"cbTimeStamp\" name=\"cbTimeStamp\" value=dispTimeStmpBit>\n                    <label for=\"cbTimeStamp\"> Show Timestamp</label>\n                </td>\n                <td>\n                    <input type=\"checkbox\" id=\"cbRawData\" name=\"cbRawData\" value=dispRawDataBit>\n                    <label for=\"cbRawData\"> Show Raw Data</label><br>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <input type=\"checkbox\" id=\"cbOpCode\" name=\"cbOpCode\" value=dispOpCodeBit>\n                    <label for=\"cbOpCode\"> Show OpCode</label>\n                </td>\n                <td>\n                    <input type=\"checkbox\" id=\"cbPlainEnglish\" name=\"cbPlainEnglish\" value=dispPlainEnglishBit>\n                    <label for=\"cbPlainEnglish\"> Show Plain English</label><br>\n                </td>\n            </tr>\n        </table>\n        <p>\n            <button type=\"button\" id=\"saveDisplay\" onclick=\"setDisplay(this)\" >Save</button>\n            <button type=\"button\" id=\"cancelDisplay\" onclick=\"setDisplay(this)\" >Cancel</button>\n        </p>\n    </div>\n    <div class=\"modal-footer\">\n      <h3>Click Save to complete</h3> \n    </div>\n  </div>\n</div>\n\n<script>\n    setTimeout(initDisplay, 500);\n</script>\n\n</body>\n</html>\n",
	"storeOutMessages": false,
	"fwdInMessages": false,
	"templateScope": "local",
	"x": 587,
	"y": 51.99993896484375,
	"wires": [
		[]
	]
}, {
	"id": "a0ef44c6.1b6228",
	"type": "mqtt in",
	"z": "eb6d436d.d04f9",
	"name": "",
	"topic": "lnIn",
	"qos": "1",
	"broker": "5bc7cc44.39f4b4",
	"x": 157,
	"y": 54,
	"wires": [
		["59f6b630.f75bb8"]
	]
}, {
	"id": "59f6b630.f75bb8",
	"type": "json",
	"z": "eb6d436d.d04f9",
	"name": "",
	"property": "payload",
	"action": "obj",
	"pretty": false,
	"x": 364,
	"y": 52.66670227050781,
	"wires": [
		["197475e1.335eca"]
	]
}, {
	"id": "57c873c8.0ef02c",
	"type": "ui_template",
	"z": "eb6d436d.d04f9",
	"group": "80746b01.4aab38",
	"name": "Plain English Decoder",
	"order": 0,
	"width": 0,
	"height": 0,
	"format": "<script>\nvar sigOffset = 2;\n\nfunction getPlainMsgText(lnData)\n{\n    var retMsg = \"\";\n    var p1, p2, p3;\n    switch(lnData[0])\n    {\n        case 0x81 : retMsg = \"System busy, please wait\"; break;\n        case 0x82 : retMsg = \"Switch track power on MAIN to OFF\"; break;\n        case 0x83 : retMsg = \"Switch track power on MAIN to ON\"; break;\n        case 0x85 : retMsg = \"Set track power on MAIN to IDLE\"; break;\n        case 0xA0 : retMsg = \"Set Loco speed for slot \" + lnData[1].toString() + \" to \" + lnData[2].toString(); break;\n        case 0xA1 : retMsg = \"Set function group 1 for slot \" + lnData[1].toString() + \" to 0x\" + (\"00\" + lnData[2].toString(16)).slice(-2); break;\n        case 0xA2 : retMsg = \"Set function group 2 for slot \" + lnData[1].toString() + \" to 0x\" + (\"00\" + lnData[2].toString(16)).slice(-2); break;\n        case 0xB0 : //REQ SWITCH\n            p1 = ((lnData[1] & 0x7F) + ((lnData[2] & 0x0F)<<7)+1);\n            retMsg = \"Set switch \" + p1.toString()  + \" to \" + (((lnData[2] & 0x20)>0) ? \"closed\":\"thrown\") + \" with coil \" + (((lnData[2] & 0x10)>0) ? \"ON\":\"OFF\"); \n            break;\n        case 0xB1 : //Turnout SENSOR state REPORT\n            p1 = ((lnData[1] & 0x7F) + ((lnData[2] & 0x0F)<<7)+1);\n            switch (lnData[2] & 0x40)\n            {\n                case 0x00:\n                    retMsg = \"Report position of switch \" + p1.toString()  + \" Closed \" + (((lnData[2] & 0x20)>0) ? \"ON\":\"OFF\") + \" thrown \" + (((lnData[2] & 0x10)>0) ? \"ON\":\"OFF\");\n                    break;\n                case 0x40:\n                    retMsg = \"Report position of switch \" + p1.toString()  + \" \" + (((lnData[2] & 0x20)>0) ? \"SWITCH \":\"AUX \") + (((lnData[2] & 0x10)>0) ? \"HIGH\":\"LOW\");\n                    break;\n            }\n            break;\n        case 0xB2 : //OPC_INPUT_REP\n            p1 = (((lnData[1] & 0x7F)<<1) + ((lnData[2] & 0x0F)<<8) + ((lnData[2] & 0x20)>>5) +1);\n            retMsg = \"Report status of block detector \" + p1.toString() + \" as \" + (((lnData[2] & 0x10)>0) ? \"OCCUPIED\":\"FREE\"); \n            break;\n        case 0xB4 : //LACK Long acknowledge\n            if (lnData[1] === 0)\n            {\n                retMsg = \"Acknowledge of message failed with response 0x\" + (\"00\" + lnData[2].toString(16).toUpperCase()).slice(-2); \n                break;\n            }\n            else\n                if (lastLACKMsg.length > 0)\n                switch (lnData[1] | 0x80)\n                {\n                    case 0xBA: //move slots\n                        retMsg = (lnData[2] === 0) ? \"Illegal move. Command not accepted\": \"Slot Move command accepted\";\n                        break;\n                    case 0xBC: //Switch Status\n                        p1 = ((lastLACKMsg[1] & 0x7F) + ((lastLACKMsg[2] & 0x0F)<<7)+1);\n                        retMsg = \"Current position of switch \" + p1.toString() + \" is \" + ((lnData[2] & 0x20) ? \"closed\":\"thrown\");\n                        break;\n                    case 0xBD: //OPC_SW_ACK\n                        if (lnData[2] === 0)\n                            retMsg = \"FIFO full. Command not accepted\";\n                        else\n                        {\n                            p1 = ((lastLACKMsg[1] & 0x7F) + ((lastLACKMsg[2] & 0x0F)<<7)+1);\n                            retMsg = \"Accepted force set switch \" + p1.toString()  + \" to \" + (((lastLACKMsg[2] & 0x20)>0) ? \"closed\":\"thrown\") + \" with coil \" + (((lastLACKMsg[2] & 0x10)>0) ? \"ON\":\"OFF\"); \n                        }\n                        break;\n                    case 0xBF: \n                        retMsg = \"Loco slot \" + (lnData[2] === 0) ? \"not\": lnData[2].toString() + \" assigned\";\n                        break;\n                    case 0xED: //immediate command\n                        retMsg = (lnData[2] === 0) ? \"DCC Buffer full. Command failed\": \"DCC Packet accepted\";\n                        break;\n                    case 0xEF:\n                        switch (lastLACKMsg[2])\n                        {\n                            case 0x7C:\n                                switch (lnData[2])\n                                {\n                                    case 0x7F: retMsg = \"Function NOT implemented, no reply\";\n                                        break;\n                                    case 0x00: retMsg = \"Programmer BUSY , task aborted, no reply\";\n                                        break;\n                                    case 0x01: retMsg = \"Task accepted. Please wait for result\";\n                                        break;\n                                    case 0x40: retMsg = \"Task accepted blind. No result\";\n                                        break;\n                                }\n                                break;\n                            case 0x7B: \n                                retMsg = \"Confirm FastClock (Rate \" + lastLACKMsg[3].toString() + \") to \" + (\"00\" + (24 - 128 + lastLACKMsg[8]).toString()).slice(-2) + \":\" + (\"00\" + (60 - 128 + lastLACKMsg[6]).toString()).slice(-2); \n                                break;\n                            default:\n                                retMsg = \"Acknowledge of message \" + ((lnData[1] === 0) ? \"failed\" : getOpCodeText(lnData[1] | 0x80) + \" with response 0x\" + (\"00\" + lnData[2].toString(16).toUpperCase()).slice(-2)); \n                                break;\n                        }\n                        break;\n                }\n            break;\n        case 0xB5 : retMsg = \"Set slot \" + lnData[1].toString() + \" to status 0x\" + (\"00\" + lnData[2].toString(16).toUpperCase()).slice(-2); break;\n        case 0xB5 : retMsg = \"Set function group 1 in consist slot \" + lnData[1].toString() + \" to 0x\" + (\"00\" + lnData[2].toString(16).toUpperCase()).slice(-2); break;\n        case 0xB8 : retMsg = \"Unlink slot \" + lnData[1].toString() + \" from slot \" + lnData[2].toString(); break;\n        case 0xB9 : retMsg = \"Link slot \" + lnData[1].toString() + \" into slot \" + lnData[2].toString(); break;\n        case 0xBA : \n            if (lnData[1] == lnData[2]) //NULL move\n                retMsg = \"Set slot \" + lnData[1].toString() + \" to \\\"In Use\\\"\";\n            else\n                if (lnData[1] === 0) //null source\n                    retMsg = \"Move loco from dispatch slot to slot \" + lnData[2].toString();\n                else\n                    if (lnData[2] === 0) //null destination\n                        retMsg = \"Move loco from slot \" + lnData[1].toString() + \" to dispatch slot\";\n                    else\n                        retMsg = \"Ooops! Invalid slot move attempt from \" + lnData[1].toString() + \" to \" + lnData[2].toString();\n            break;\n        case 0xBB : retMsg = \"Request information from slot \" + lnData[1].toString(); break;\n        case 0xBC : \n            p1 = ((lnData[1] & 0x7F) + ((lnData[2] & 0x0F)<<7)+1);\n            retMsg = \"Request status of switch \" + p1.toString();\n            break;\n        case 0xBD : \n            p1 = ((lnData[1] & 0x7F) + ((lnData[2] & 0x0F)<<7)+1);\n            retMsg = \"Force set switch \" + p1.toString()  + \" to \" + (((lnData[2] & 0x20)>0) ? \"closed\":\"thrown\") + \" with coil \" + (((lnData[2] & 0x10)>0) ? \"ON\":\"OFF\"); \n            break;\n        case 0xBF : retMsg = \"Request slot information for loco addr \" + lnData[2].toString(); break;\n        case 0xD0 : retMsg = decodeMultiSenseMsg(lnData); break;\n        case 0xD4 : retMsg = \"OPC_UHLI-FUN\"; break;\n        case 0xD7 : retMsg = \"OPC_PANEL_RESPONSE\"; break;\n        case 0xDF : retMsg = \"OPC_PANEL_QUERY\"; break;\n        case 0xE4 : p1 = ((lnData[4] & 0x7F) + ((lnData[3] & 0x1F)<<7)); //sensor id\n\t\t\t\t\tp2 = ((lnData[6] & 0x7F) + ((lnData[5] & 0x7F)<<7)); //loco address\n\t\t\t\t\tp3 = (lnData[3] & 0x20) ? \"south\" : \"north\";\n\t\t\t\t\tswitch (lnData[2])\n                    {\n\t\t\t\t\t\tcase 0x00: retMsg = \"Lissy IR Report for Sensor \" + p1.toString() + \" - Loco \" + p2.toString() + \" going \" + p3; \n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 0x40: retMsg = \"Lissy Wheel Count Report for Sensor \" + p1.toString() + \" - \" + p2.toString() + \" axles going \" + ((lnData[3] & 0x20) > 0) ? \"north\" : \"south\"; \n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 0x41: retMsg = \"Lissy RFID x Report for Sensor \" + p1.toString(); \n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault: \"Unknown Lissy Sensor Report \" + lnData;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n        case 0xE5 : retMsg = decodePeerMsg(lnData); break;\n        case 0xE6 : retMsg = \"OPC_ALM_READ\"; break;\n        case 0xE7 : switch (lnData[2])\n                    {\n                        case 0x7B: retMsg = \"Slot Data for FastClock slot \"; break;\n                        case 0x7C: \n                            if (lnData[4] === 0) { retMsg = \"Read CV \" + (lnData[9]+1).toString() + \" Value \" + lnData[10].toString(); break;}\n                            if (lnData[4] & 0x01) { retMsg = \"Service Mode track empty\"; break; }\n                            if (lnData[4] & 0x02) { retMsg = \"No Write acknowledge response from decoder\"; break; }\n                            if (lnData[4] & 0x04) { retMsg = \"Failed to detect READ response from decoder\"; break; }\n                            if (lnData[4] & 0x08) { retMsg = \"User Aborted this command\"; break; }\n                            retMsg = \"Unknown response from Service track\";\n                            break;\n                        default: retMsg = \"Slot data for slot \" + lnData[2].toString();\n                    }\n                    break;\n        case 0xED : \n            var dccData = [];\n            var bitMask = 0x01;\n            for (var i = 0; i < (lnData[3] & 0x70)>>4; i++)\n            {\n                dccData.push(lnData[5+i] | ((lnData[4] & bitMask) << (7-i)));\n                bitMask = bitMask << 1;\n            }\n            if (dccData.length >= 2)\n                retMsg = decodeDCCPacket(dccData);\n            else\n                retMsg = \"Trying to send invalid DCC packet\";\n            break;\n        case 0xEE : retMsg = \"OPC_WR_LIM_DATA\"; break;\n        case 0xEF : switch (lnData[2])\n                    {\n                        case 0x7B: retMsg = \"Set FastClock (Rate \" + lnData[3].toString() + \") to \" + (\"00\" + (24 - 128 + lnData[8]).toString()).slice(-2) + \":\" + (\"00\" + (60 - 128 + lnData[6]).toString()).slice(-2); break;\n                        case 0x7C: \n                            var decAddr = (lnData[5] << 7) + lnData[6];\n                            retMsg = (((lnData[3] & 0x04) > 0) ? (\"OpsMode Addr \" + decAddr.toString())  : \"Service Mode\") + (((lnData[3] & 0x40) > 0) ? \" write\" : \" read\")  + \" task CV \" + (lnData[9]+1).toString() + \" Val \" + lnData[10].toString(); break;\n                        default: retMsg = \"Update slot information of slot \" + lnData[2].toString();\n                    }\n                    break;\n    }\n    return retMsg;\n}\n\nfunction decodeDCCPacket(packetData)\n{\n    //identify packet type\n    if (packetData[0] === 0) //Broadcast address\n    {\n        return \"Broadcast Data\";\n    }\n    if ((packetData[0] > 0) && (packetData[0] <= 0x7F)) //Multi-Function decoders with 7 bit addresses\n    {\n        return \"Multi-Function decoders with 7 bit address \" + packetData[0].toString();\n    }\n    if ((packetData[0] > 0x7F) && (packetData[0] <= 0xBF)) //Basic Accessory Decoders with 9 bit and Extended Accessory \n                                                            //Decoders with 11-bit addresses\n    {\n        if (packetData.length == 2)\n           return \"Basic Accessory Decoder\";\n        else\n        {\n            var baseAddr = (((~packetData[1]) & 0x70) << 2) | ( packetData[0] & 0x3F);\n            var groupAddr = (packetData[1] & 0x06) >> 1;\n            var pairAddr = packetData[1] & 0x01;\n            var accStatus = (packetData[1] & 0x08)>>3;\n            var mastAddr = (4 * baseAddr) + groupAddr - sigOffset;\n            return \"DCC command to Signal Mast \" + mastAddr.toString() + \" aspect \" + (packetData[2] & 0x1F).toString();\n        }\n    }                                                        \n    if ((packetData[0] > 0xBF) && (packetData[0] <= 0xE7)) //Multi Function Decoders with 14 bit addresses\n    {\n        return \"Multi Function Decoders with 14 bit addresses\";\n    }\n    if ((packetData[0] > 0xE7) && (packetData[0] <= 0xFE)) //Reserved for Future Use\n    {\n        return \"Reserved for Future Use\";\n    }\n    if (packetData[0] == 0xFF) //Idle Packet \n    {\n        return \"Idle Packet \";\n    }\n    return \"Invalid DCC Command\";\n}\n    \nfunction decodePeerMsg(msgData)\n{\n    if (msgData[1] == 0x10)\n    {\n        switch (msgData[4])\n        {\n            case 0x01:\n                return \"SV programming format 1 message\";\n                break;\n            case 0x02:\n                switch (msgData[3])\n                {\n                    case 0x71: //\n                        switch (msgData[11])\n                        {\n                            case 0x01: \n                                var btnAddr = (msgData[8] & 0x3F) + ((msgData[9] & 0x3F)<<6); \n                                var btnVal = (msgData[12] & 0x3F); \n                                var btnEvt = btnVal.toString();\n                                switch (btnVal)\n                                {\n                                    case 0: btnEvt = \"Btn Down\"; break;\n                                    case 1: btnEvt = \"Btn Up\"; break;\n                                    case 2: btnEvt = \"Btn Click\"; break;\n                                    case 3: btnEvt = \"Btn Hold\"; break;\n                                    case 4: btnEvt = \"Btn Double Click\"; break;\n                                }\n                                return \"Button \" + btnAddr.toString() + \" Event \" + btnEvt; \n                            case 0x00: \n                                var analogAddr = (msgData[8] & 0x3F) + ((msgData[9] & 0x3F)<<6); \n                                var analogVal = (msgData[12] & 0x3F) + ((msgData[13] & 0x3F)<<6); \n                                return \"Analog Input \" + analogAddr.toString() + \" Value \" + analogVal.toString(); \n                                break;\n                            default: \"Invalid Universal Input Data\"; break;\n                        }\n                        break;\n                    default:\n                        return \"SV programming format 2 message\";\n                        break;\n                }\n            default:\n                return \"invalid SV message format \" + msgData[3].toString();\n                break;\n        }\n    }\n    else\n        return \"Peer to peer message. Meaning depending on device\";\n}\n\nfunction decodeMultiSenseMsg(sensData)\n{\n    switch (sensData[1] & 0X60)\n    {\n        case 0x00:\n            var zoneAddr = (((sensData[1] & 0x1F) << 7) + (sensData[2] & 0x7F));\n            var locoAddr;\n            if (sensData[3] == 0x7E)\n                locoAddr = sensData[4] & 0x7F;\n            else\n                locoAddr = (sensData[3] << 7) + (sensData[4] & 0x7F);\n            return \"Release locomotive \" + locoAddr.toString() + \" from block \" + zoneAddr.toString();\n            break;\n        case 0x20: \n            var zoneAddr = (((sensData[1] & 0x1F) << 7) + (sensData[2] & 0x7F));\n            var locoAddr;\n            if (sensData[3] == 0x7E)\n                locoAddr = sensData[4] & 0x7F;\n            else\n                locoAddr = (sensData[3] << 7) + (sensData[4] & 0x7F);\n            return \"Detected locomotive \" + locoAddr.toString() + \" in block \" + zoneAddr.toString();\n            break;\n        case 0x60:\n            switch ((sensData[1] & 0X0E) >> 1)\n            {\n                case 0x01:\n                    var pmAddr = ((sensData[1] & 0x01) << 7) + sensData[2];\n                    return \"Power Manager \" + pmAddr.toString() + \" Message \";\n                    break;\n                case 0x02:\n                    return \"Barcode reader message\";\n                    break;\n                default:\n                    return \"Invalid OPC_MULTI_SENSE Device Message\";\n                    break;\n            }\n        default:\n            return \"unspecified OPC_MULTI_SENSE message\";\n    }\n   \n}\n\n</script>\n",
	"storeOutMessages": false,
	"fwdInMessages": false,
	"templateScope": "local",
	"x": 607,
	"y": 136,
	"wires": [
		[]
	]
}, {
	"id": "80746b01.4aab38",
	"type": "ui_group",
	"z": "",
	"name": "LocoNet Viewer",
	"tab": "bd7a3351.e079b",
	"disp": false,
	"width": "7",
	"collapse": false
}, {
	"id": "5bc7cc44.39f4b4",
	"type": "mqtt-broker",
	"z": "",
	"name": "IoTTExt",
	"broker": "iott.ddns.net",
	"port": "1883",
	"clientid": "",
	"usetls": false,
	"compatmode": true,
	"keepalive": "60",
	"cleansession": true,
	"birthTopic": "",
	"birthQos": "0",
	"birthRetain": "false",
	"birthPayload": "",
	"closeTopic": "",
	"closePayload": "",
	"willTopic": "",
	"willQos": "0",
	"willPayload": ""
}, {
	"id": "bd7a3351.e079b",
	"type": "ui_tab",
	"z": "",
	"name": "LocoNet Viewer",
	"icon": "dashboard",
	"order": 9
}]
